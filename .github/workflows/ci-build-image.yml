name: CI 자동화

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev", "main" ]

permissions: write-all

jobs:

  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      TAG: latest

    steps:
      - name: 리포지토리 소스 코드 가져오기
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_TOKEN }}
          submodules: recursive

      - name: JDK 17을 설치합니다
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 명령 실행을 위한 권한을 부여합니다
        run: chmod +x gradlew

      - name: Gradle build를 수행합니다
        run: ./gradlew build

#      - name: Jacoco 리포트 아티팩트로 업로드
#        uses: actions/upload-artifact@v3
#        with:
#          name: jacoco-report
#          path: build/reports/jacoco/test/html/index.html

#      - name: 테스트 결과를 PR에 코멘트로 등록합니다
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        if: always()
#        with:
#          files: '**/build/test-results/test/TEST-*.xml'
#
#      - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록합니다
#        uses: mikepenz/action-junit-report@v3
#        if: always()
#        with:
#          report_paths: '**/build/test-results/test/TEST-*.xml'
#          token: ${{ github.token }}

      - name: 테스트 커버리지를 PR에 코멘트로 등록합니다
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          title: "📈 테스트 커버리지 리포트입니다"
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 51
          min-coverage-changed-files: 50
          update-comment: true
          debug-mode: true  # 디버그 모드 활성화

#      - name: Docker Buildx 설치
#        uses: docker/setup-buildx-action@v2
#
#      - name: Docker Hub 로그인
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#
#      - name: Docker Build 와 Push
#        uses: docker/build-push-action@v5.1.0
#        with:
#          push: true # 빌드 완료 후 Docker Hub로 푸시
#          context: . # Dockerfile이 위치한 경로
#          platforms: linux/amd64,linux/arm64 # 멀티 플랫폼 지원
#          tags: ${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}:${{env.TAG}}
#          cache-from: type=gha # GitHub Actions 캐싱 활성화
#          cache-to: type=gha,mode=max # 최대 캐싱 활성화
  
    
